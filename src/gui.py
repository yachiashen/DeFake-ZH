import gradio as gr


try:
    from .scores import *
    from .interface import *
    from .otherGUI import *
except:
    from scores import *
    from interface import *
    from otherGUI import *


lang_options = {
    "繁體中文": {
        "title": "## 中文假新聞偵測器",
        "description": "輸入一篇新聞標題與內文，系統將判斷真假機率與分析語氣",
        "input_title": "新聞標題",
        "input_content": "新聞內文",
        "submit_btn": "-- 完整分析 --",
        "quick_btn": "-- 快速分析 --",
        "clear_btn": "-- 清除 --",
        "accordion_label": "點我展開查看詳細分析",
        "result": "分析結果",
        "disclaimer": "<div align='center'><small>⚠️ 本系統僅供參考，分析結果來自機器學習模型，請勿視為最終真實依據。 ⚠️</small></div>"
    },
    "English": {
        "title": "## Fake News Detector for Chinese",
        "description": "Enter the headline and content to analyze its truthfulness and tone.",
        "input_title": "News Title",
        "input_content": "News Content",
        "submit_btn": "-- FULL ANALYSIS --",
        "quick_btn": "-- QUICK ANALYSIS --",
        "clear_btn": "-- CLEAR --",
        "accordion_label": "Click to show detailed analysis",
        "result": "Results",
        "disclaimer": "<div align='center'><small>⚠️ This system is for reference only. The analysis is generated by a machine learning model and should not be considered factual. ⚠️</small></div>"
    }
}


def update_labels(language):
    config = lang_options[language]
    return (
        gr.update(label=config["input_title"]),
        gr.update(label=config["input_content"]),
        gr.update(label=config["result"]),
        gr.update(value=config["submit_btn"]),
        gr.update(value=config["quick_btn"]),
        gr.update(value=config["clear_btn"]),
        gr.Markdown(value=config["title"]),
        gr.update(value=config["description"]),
        gr.update(label=config["accordion_label"]),
        gr.update(value=config["disclaimer"])
    )

def interface_fn(title, content):
    print("\n\n======  開始完整分析  ======\n\n")
    score = 0
    
    title, content = re.sub(r'\s+', '', title), re.sub(r'\s+', '', content)
    if not isinstance(content, str) or content == "" or title == "":
        yield "〔 請輸入新聞標題與新聞內容再進行分析 〕", "", "", "", "", "", "", "", "", ""
        return 
    
    yield "［1/4］正在搜尋 MGP 資料庫...", "", "", "", "", "", title, content, "", ""
    
    ### MGP Part
    mgp_html_title_update, mgp_html_output_update, mgp_description, mgp_search_cnt, mgp_html_code = update_mgp_part(title, content)
    detail = f"\n<h3 style='color: orange;'>MGP 資料搜尋結果：</h3>\n\n"
    detail += mgp_description + "\n\n"
    
    if bool(mgp_search_cnt):
        increase = 33.333
        increase += ((mgp_search_cnt - 3) * 7.5) if increase > 3 else 0
        score += increase
        print(f"\n[MGP] : score += {increase:.3f}, current score = {score}\n")
    
    yield "［2/4］ MGP 資料庫比對完成，正在檢查邏輯矛盾...", detail, mgp_html_title_update, mgp_html_output_update, "", "", title, content, mgp_html_code, ""
    
    ### Contradiction Part
    contrad_html_title_update, contrad_html_output_update, contrad_description, contrad_search_cnt, contrad_html_code = update_contradiction_part(title, content)
    detail += f"\n<h3 style='color: orange;'>三元組搜尋矛盾結果：</h3>\n\n"
    detail += contrad_description + "\n\n"
    
    if bool(contrad_search_cnt):
        increase = 33.333
        increase += ((contrad_search_cnt - 5) * 7.5) if increase > 5 else 0
        score += increase
        print(f"\n[CONTRAD] : score += {increase:.3f}, current score = {score}\n")

    yield "［3/4］邏輯矛盾比對完成，正在分析標題與內文...", detail, mgp_html_title_update, mgp_html_output_update, contrad_html_title_update, contrad_html_output_update, title, content, mgp_html_code, contrad_html_code

    news_sentences, title_dict, sentences_dict, sentence_summary_scores, prob = get_all_scores(title, content)
    print(f"\n[BERT] : prob = {prob * 100}\n")

    score += prob * 100
    score = min(score, 99.999)
    
    judgment = "" if 15 <= score <= 67 else "\n\t"
    judgment += f"【 {fake_score_transform(score)} 】 "

    # if score > 67:
    #     judgment = f"【 {fake_score_transform(score)} 】 "
    # elif score < 15:
    #     judgment = f"【 {fake_score_transform(score)} 】 "
    # else:
    #     judgment = f"\n\t【 {fake_score_transform(score)} 】"
    
    # summary = "========================================\n\n"
    # summary += f"      〔 預測為假新聞的機率 ： {score:.3f} ％ 〕   \n\n"
    # summary += f"經過系統判斷此新聞為  {judgment}\n\n"
    # summary += "========================================\n\n"
    # summary += "      〔 句子綜合分數 〕   \n\n"
    
    # sentence_summary_score_dict = sentence_score_transform(sentence_summary_scores)
    # for k, v in sentence_summary_score_dict.items():
    #     summary += f"  ・ {k}{v}  \n\n"
    # summary += "========================================"

    summary = update_summary_part(score, sentence_summary_scores)
    
    detail += "<h3 style='color: orange;'>標題分析：</h3>\n\n"
    title_score_dict = title_score_transform(title_dict)
    for k, v in title_score_dict.items():
        detail += f"- {k}{v}\n"

    detail += "\n\n<h3 style='color: orange;'>內文句子分析：</h3>\n"
    for sent in news_sentences:
        detail += f"\n> {sent}\n"
        sentence_score_dict = sentence_score_transform(sentences_dict[sent])
        for term in ['情感分析', '主觀性']:
            detail += f"- {term}{sentence_score_dict[term]}\n"

    yield summary, detail, mgp_html_title_update, mgp_html_output_update, contrad_html_title_update, contrad_html_output_update, title, content, mgp_html_code, contrad_html_code

def quick_interface_fn(title, content):
    print("\n\n======  開始快速分析  ======\n\n")
    score = 0

    title, content = re.sub(r'\s+', '', title), re.sub(r'\s+', '', content)
    if not isinstance(content, str) or content == "":
        yield "〔 請輸入新聞內容再進行分析 〕", "", "", "", "", "", "", "", "", ""
        return 
    
    yield "［1/4］正在搜尋 MGP 資料庫...", "", "", "", "", "", title, content, "", ""


    ### MGP Part
    mgp_html_title_update, mgp_html_output_update, mgp_description, mgp_search_cnt, mgp_html_code = update_mgp_part(title, content)
    detail = f"\n<h3 style='color: orange;'>MGP 資料搜尋結果：</h3>\n\n"
    detail += mgp_description + "\n\n"

    if bool(mgp_search_cnt):
        increase = 33.333
        increase += ((mgp_search_cnt - 3) * 7.5) if increase > 3 else 0
        score += increase
        print(f"\n[MGP] : score += {increase:.3f}, current score = {score}\n")
    
    yield "［2/3］ MGP 資料庫比對完成，正在分析標題與內文...", detail, mgp_html_title_update, mgp_html_output_update, "", "", title, content, mgp_html_code, ""

    news_sentences, title_dict, sentences_dict, sentence_summary_scores, prob = get_all_scores(title, content)
    print(f"\n[BERT] : prob = {prob * 100}\n")
    
    score += prob * 100
    score = min(score, 99.999)
        

    judgment = "" if 15 <= score <= 67 else "\n\t"
    judgment += f"【 {fake_score_transform(score)} 】 "

    # if score > 67:
    #     judgment = f"【 {fake_score_transform(score)} 】 "
    # elif score < 15:
    #     judgment = f"【 {fake_score_transform(score)} 】 "
    # else:
    #     judgment = f"\n\t【 {fake_score_transform(score)} 】"
    
    # summary = "========================================\n\n"
    # summary += f"      〔 預測為假新聞的機率 ： {score:.3f} ％ 〕   \n\n"
    # summary += f"經過系統判斷此新聞為  {judgment}\n\n"
    # summary += "========================================\n\n"
    # summary += "      〔 句子綜合分數 〕   \n\n"
    
    # sentence_summary_score_dict = sentence_score_transform(sentence_summary_scores)
    # for k, v in sentence_summary_score_dict.items():
    #     summary += f"  ・ {k}{v}  \n\n"
    # summary += "========================================"

    summary = update_summary_part(score, sentence_summary_scores)
    
    detail += "<h3 style='color: orange;'>標題分析：</h3>\n\n"
    title_score_dict = title_score_transform(title_dict)
    for k, v in title_score_dict.items():
        detail += f"- {k}{v}\n"

    detail += "\n\n<h3 style='color: orange;'>內文句子分析：</h3>\n"
    for sent in news_sentences:
        detail += f"\n> {sent}\n"
        sentence_score_dict = sentence_score_transform(sentences_dict[sent])
        for term in ['情感分析', '主觀性']:
            detail += f"- {term}{sentence_score_dict[term]}\n"

    yield summary, detail, mgp_html_title_update, mgp_html_output_update, "", "", title, content, mgp_html_code, ""

with gr.Blocks() as demo:
    # gr.Markdown("# DeFake-ZH")
    with gr.Row():
        with gr.Column(scale=5, min_width=400):
            gr.Markdown('<div align="center"><h1>DeFake-ZH</h1></div>')
        with gr.Column(scale=1, min_width=150):
            lang = gr.Dropdown(["繁體中文", "English"], label="", value="繁體中文")
        
    title_markdown = gr.Markdown("## 中文假新聞偵測器")
    desc_markdown = gr.Markdown("輸入一篇新聞標題與內文，系統將判斷真假機率與分析語氣")

    with gr.Row():
        with gr.Column():
            title_input = gr.Textbox(label="新聞標題")
            content_input = gr.Textbox(label="新聞內文", lines=6)
            with gr.Row():
                clear_btn = gr.Button(value="-- 清除 --")
                quick_btn = gr.Button(value="-- 快速分析 --")
                submit_btn = gr.Button(value="-- 完整分析 --")
                

        with gr.Column():
            output_summary = gr.HTML()
            with gr.Accordion(label="點我展開查看詳細分析", open=False) as accordion_box:
                output_detail = gr.Markdown()
    
    hidden_title_textbox = gr.Textbox(value = "", visible = False)
    hidden_content_textbox = gr.Textbox(value = "", visible = False)
    hidden_mgp_textbox = gr.Textbox(value = "", visible = False)
    hidden_contrad_textbox = gr.Textbox(value = "", visible = False)

    ## MGP Part
    mgp_html_title = gr.HTML()
    mgp_html_output = gr.HTML()
    set_mgp_hidden_button(mgp_html_output, hidden_title_textbox, hidden_content_textbox, hidden_mgp_textbox)
    
    ## Contradiction Part 
    contradictory_html_title = gr.HTML()
    contradictory_html_output = gr.HTML()
    set_contradiction_hidden_button(contradictory_html_output, hidden_title_textbox, hidden_content_textbox, hidden_contrad_textbox)
    

    disclaimer_text = gr.Markdown(lang_options["繁體中文"]["disclaimer"])
    
    lang.change(
        update_labels,
        inputs=lang,

        outputs=[
            title_input, content_input, output_summary,
            submit_btn, quick_btn, clear_btn,
            title_markdown, desc_markdown,
            accordion_box,
            disclaimer_text
        ]
    )

    quick_btn.click(
        fn=quick_interface_fn,
        inputs=[title_input, content_input],
        outputs=[output_summary, output_detail, mgp_html_title, mgp_html_output, 
        contradictory_html_title, contradictory_html_output, 
        hidden_title_textbox, hidden_content_textbox, hidden_mgp_textbox, hidden_contrad_textbox]
    )
    
    submit_btn.click(
        fn=interface_fn,
        inputs=[title_input, content_input],
        outputs=[output_summary, output_detail, mgp_html_title, mgp_html_output, 
        contradictory_html_title, contradictory_html_output, 
        hidden_title_textbox, hidden_content_textbox, hidden_mgp_textbox, hidden_contrad_textbox]
    )

    clear_btn.click(
        fn=lambda: ("", "", "", "", "", "", "", "", "", "", "", ""),
        outputs=[title_input, content_input, output_summary, output_detail, 
                 mgp_html_title, mgp_html_output, contradictory_html_title, contradictory_html_output, 
                 hidden_title_textbox, hidden_content_textbox, hidden_mgp_textbox, hidden_contrad_textbox]
    )


if __name__ == "__main__":
    demo.launch(share=False)
